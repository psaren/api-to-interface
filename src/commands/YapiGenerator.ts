import Generator from './Generator'
import axios, { AxiosInstance, AxiosResponse } from 'axios'
import { getAtiConfigs, parseTsCode, removeIndexSignatureMiddleWare } from '../utils'
import { YapiUrls } from '../dict'
import camelCase from 'camelcase'
import { compile, Options } from 'json-schema-to-typescript'

const fs = require('fs-extra')
const ora = require('ora')
const path = require('path')
const consola = require('consola')

type CustomInterfaceName = (name: string, type: string, response: any) => string
interface YapiConfig {
  url: string
  projectId: string
  token: string
  output?: string
  groupId?: string[]
  json2TsOptions?: Partial<Options>
  customInterfaceName?: CustomInterfaceName
}

export type ApiItem = { path: string, id: number }

const defaultYapiGeneratorConfig: Partial<YapiConfig> = {
  json2TsOptions: {
    bannerComment: `/* tslint:disable */
    /* This file was automatically generated by api-to-interface.
    * DO NOT MODIFY IT BY HAND.\n*/`
  },
  customInterfaceName: (name, type) => {
    if (type === 'req') {
      return `${name}Req`
    } else {
      return `${name}Res`
    }
  }
}
class YapiGenerator extends Generator<YapiConfig> {
  request: AxiosInstance

  constructor () {
    super(getAtiConfigs({ output: 'atiOutput' }))
    this.initRequest()
  }

  public initRequest () {
    this.config = Object.assign({}, defaultYapiGeneratorConfig, this.config)
    const atiConfigs = this.config
    const request = axios.create({
      baseURL: atiConfigs.url
    })
    request.interceptors.request.use((config) => {
      if (config.method === 'post') {
        config.data = Object.assign(config.data || {}, { token: atiConfigs.token })
      } else {
        config.params = Object.assign(config.params || {}, { token: atiConfigs.token })
      }
      return config
    })
    request.interceptors.response.use((response: AxiosResponse<{errmsg: string, errcode: number}>) => {
      if (response?.data?.errcode && response?.data?.errmsg) {
        consola.error(response?.data?.errmsg)
      }
      return response
    })
    this.request = request
    return this.request
  }

  public checkConfig () {
    const { url, projectId, token } = this.config
    if (!url) {
      consola.error('url is required!')
      return false
    }
    if (!projectId) {
      consola.error('projectId is required!')
      return false
    }
    if (!token) {
      consola.error('token is required!')
      return false
    }
    return true
  }

  writeInterfaceToFile (content: string, name: string, paths: string[]) {
    const outputRootPath = path.resolve(process.cwd(), `${this.config.output}`)
    if (!fs.existsSync(outputRootPath)) {
      fs.mkdirSync(outputRootPath)
    }
    const fileDirPath = path.resolve(outputRootPath, `${paths[paths.length - 2]}`)
    if (!fs.existsSync(fileDirPath)) {
      fs.mkdirSync(fileDirPath)
    }
    const filePath = `${fileDirPath}/${name}.ts`
    let newContent = content
    if (fs.existsSync(filePath)) {
      newContent = fs.readFileSync(filePath, { encoding: 'utf8' }) + `\n${content}`
    }
    fs.writeFileSync(filePath, newContent, { encoding: 'utf8' })
  }

  customInterfaceName = (name: string, type: string, response: any) => {
    return this.config?.customInterfaceName?.(name, type, response) || name
  }

  generateInterface = async (item: ApiItem) => {
    const resp = await this.request({
      url: YapiUrls.apiInfo,
      params: {
        id: item.id
      }
    })
    const respData = resp?.data?.data
    if (respData && respData?.res_body_is_json_schema && respData?.res_body) {
      try {
        const atiConfigs = this.config
        const paths = respData?.path?.split('/')
        const name: string = paths[paths.length - 1]
        const resBody = JSON.parse(respData.res_body)
        const resSchema = resBody?.properties?.data || resBody
        let reqInterfaceIsExist = false
        if (respData.req_body_type === 'json' && respData.req_body_is_json_schema) {
          reqInterfaceIsExist = true
          const reqBody = JSON.parse(respData.req_body_other)
          const reqSchema = reqBody?.properties?.data || reqBody
          const tempName = respData?.path?.split('/')?.slice(-2)?.join('-')
          // If interface name is `title`, change the interface name
          const interfaceName = this.customInterfaceName(camelCase(tempName), 'req', respData)
          if (reqSchema.title === 'title') {
            reqSchema.title = interfaceName
          }
          compile(reqSchema, interfaceName, atiConfigs.json2TsOptions)
            .then(ts => {
              this.writeInterfaceToFile(parseTsCode(ts, removeIndexSignatureMiddleWare), name, paths)
            })
        }
        if (resSchema) {
          const interfaceName = this.customInterfaceName(camelCase(name), 'res', respData)

          const compileOptions = {
            ...(atiConfigs?.json2TsOptions || {})
          }
          // remove banner if req interface is exist, that mean bannerComment is already add in the file
          if (reqInterfaceIsExist && compileOptions) {
            compileOptions.bannerComment = ''
          }
          compile(resSchema, interfaceName, compileOptions)
            .then(ts => {
              this.writeInterfaceToFile(parseTsCode(ts, removeIndexSignatureMiddleWare), name, paths)
            })
        } else {
          consola.error(respData?.path)
          consola.info(`ignore: ${respData.res_body}`)
        }
      } catch (err) {
        consola.error(err)
        console.log(respData)
      }
    }
  }

  getGroupId = async () => {
    if (!this.config?.groupId?.length) {
      const resp = await this.request({
        url: YapiUrls.listMenu,
        params: {
          project_id: this.config.projectId
        }
      })
      this.config.groupId = resp?.data?.data?.map(item => item._id) || []
    }
  }

  generate = async () => {
    await this.getGroupId()
    this.config.groupId?.forEach(async (catId) => {
      const spinner = ora(`id: ${catId} 任务开始\n`).start()
      const resp = await this.request({
        url: YapiUrls.listCat,
        params: { page: 1, limit: 50, catid: catId }
      })
      const list = resp?.data?.data?.list || []
      const apiList = list.map(item => {
        return {
          path: item.path,
          id: item._id
        }
      })

      if (apiList.length) {
        Promise.all(apiList.map(this.generateInterface))
          .then(() => {
            spinner.succeed(`id: ${catId} 任务完成`)
          })
      } else {
        spinner.stop()
      }
    })
  }
}

export default YapiGenerator
